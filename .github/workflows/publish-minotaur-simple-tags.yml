name: Publish alpha

on:
  push:
    tags: ['alpha', 'beta', 'release']

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '21' }

      - uses: gradle/actions/setup-gradle@v4

      - id: ch
        name: Parse channel
        shell: bash
        run: |
          case "${GITHUB_REF_NAME}" in
            alpha|beta|release) echo "channel=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT ;;
            *) echo "Unsupported tag"; exit 1 ;;
          esac

      - id: mc
        name: Detect Minecraft version
        shell: bash
        run: |
          set -euo pipefail
          MC=""
          if [[ -f gradle.properties ]]; then
            MC="$(sed -nE 's/^[[:space:]]*minecraft_version[[:space:]]*=[[:space:]]*([0-9][0-9.]*)/\1/p' gradle.properties | head -n1 || true)"
          fi
          [[ -n "$MC" ]] || { echo "MC version not found"; exit 1; }
          echo "mc=$MC" >> $GITHUB_OUTPUT
          echo "Detected MC=$MC"

      - id: ver
        name: Compute next version
        shell: bash
        run: |
          set -euo pipefail
          CH="${{ steps.ch.outputs.channel }}"
          MC="${{ steps.mc.outputs.mc }}"

          LAST_RELEASE="$(git tag --list "v[0-9]*+mc${MC}" --sort=-v:refname \
                          | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+\+mc'"${MC}"'$' \
                          | head -n1 || true)"
          if [[ -z "$LAST_RELEASE" ]]; then
            MA=0; MI=1; PA=0
          else
            V="${LAST_RELEASE%%+mc*}"; V="${V#v}"
            IFS=. read -r MA MI PA <<< "$V"
          fi

          BASE_NEXT="${MA}.${MI}.$((PA+1))"

          make_pre() {
            local kind="$1"
            local last="$(git tag --list "v${BASE_NEXT}-${kind}.*+mc${MC}" --sort=-v:refname | head -n1 || true)"
            if [[ -z "$last" ]]; then echo 1; else
              echo $(( $(sed -nE 's/^v[0-9]+\.[0-9]+\.[0-9]+-'${kind}'\.([0-9]+)\+mc.+/\1/p' <<<"$last") + 1 ))
            fi
          }

          if [[ "$CH" == "release" ]]; then
            VERSION="${BASE_NEXT}"
          elif [[ "$CH" == "beta" ]]; then
            VERSION="${BASE_NEXT}-beta.$(make_pre beta)"
          else
            VERSION="${BASE_NEXT}-alpha.$(make_pre alpha)"
          fi

          PERM_TAG="v${VERSION}+mc${MC}"
          echo "version=$VERSION"   >> $GITHUB_OUTPUT
          echo "perm_tag=$PERM_TAG" >> $GITHUB_OUTPUT

      - id: changelog
        name: Prepare changelog notes
        shell: bash
        run: |
          set -euo pipefail
          MODE="${{ steps.ch.outputs.channel }}"
          NOTES_FILE="$RUNNER_TEMP/changelog.md"

          if [[ "$MODE" == "release" ]]; then
            python3 scripts/changelog_tool.py release \
              --file CHANGELOG.md \
              --version "${{ steps.ver.outputs.version }}" \
              --notes-output "$NOTES_FILE" \
              --update-file
          else
            python3 scripts/changelog_tool.py "$MODE" \
              --file CHANGELOG.md \
              --notes-output "$NOTES_FILE"
          fi

          NOTESC=$(cat "$NOTES_FILE")
          NOTESC=${NOTESC//'%'/'%25'}
          NOTESC=${NOTESC//$'\n'/'%0A'}
          NOTESC=${NOTESC//$'\r'/'%0D'}
          echo "notes=$NOTESC" >> "$GITHUB_OUTPUT"

      - name: Commit changelog update
        if: ${{ steps.ch.outputs.channel == 'release' }}
        shell: bash
        run: |
          set -euo pipefail
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          git checkout -B "$DEFAULT_BRANCH"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          if git diff --cached --quiet; then
            echo "CHANGELOG に更新がありません"
          else
            git commit -m "docs: release ${{ steps.ver.outputs.version }}"
            git push origin "$DEFAULT_BRANCH"
          fi

      - name: Create permanent tag
        shell: bash
        run: |
          set -euo pipefail
          PERM_TAG="${{ steps.ver.outputs.perm_tag }}"
          MC="${{ steps.mc.outputs.mc }}"
          CH="${{ steps.ch.outputs.channel }}"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$PERM_TAG" -m "Auto ${CH} for MC ${MC}"
          git push origin "$PERM_TAG"

      - name: Build (override mod_version at CI)
        run: ./gradlew clean build --stacktrace -Pmod_version=${{ steps.ver.outputs.version }}

      - name: Publish to Modrinth & GitHub (mc-publish)
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          # --- Modrinth ---
          modrinth-id: jWHdryID
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}

          # --- バージョン表記・チャンネル ---
          version: ${{ steps.ver.outputs.perm_tag }}          # 表示名は恒久タグ文字列（好みで v なしにしてもOK）
          version-type: ${{ steps.ch.outputs.channel }}       # release | beta | alpha

          loaders: fabric
          game-versions: ${{ steps.mc.outputs.mc }}
          java: 21

          # mc-publish は自動ビルドもできますが、ここでは生成済みJARを渡して確実に公開
          files: build/libs/*[!sources][!dev].jar

          # --- GitHub Release 連携（同名タグ） ---
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-tag: ${{ steps.ver.outputs.perm_tag }}
          github-prerelease: ${{ steps.ch.outputs.channel != 'release' }}
          github-draft: false
          changelog: ${{ steps.changelog.outputs.notes }}
          github-body: ${{ steps.changelog.outputs.notes }}

      - name: Notify Discord (all channels)
        if: ${{ success() }}   # 失敗時は送らない。送るなら always() に変更
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          CHANNEL:     ${{ steps.ch.outputs.channel }}   # alpha | beta | release
          VERSION_TAG: ${{ steps.ver.outputs.perm_tag }} # 例: v1.2.3-beta.4+mc1.21.8
          MC_VERSION:  ${{ steps.mc.outputs.mc }}        # 例: 1.21.8
          MODRINTH_ID: jWHdryID          # ←自分の Modrinth Project ID に置換
        run: |
          set -euo pipefail

          # ---- メタ情報 ----
          NOW_UTC="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          MODRINTH_VER_URL="https://modrinth.com/mod/${MODRINTH_ID}/version/${VERSION_TAG}"

          # ---- チャンネル別の外観（色・タイトルアイコン・pre-release表記）----
          # Discord の color は 24bit 整数（例：0x2ECC71 = 3066993）
          case "${CHANNEL}" in
            alpha)
              TITLE_PREFIX="🔬 Alpha"
              COLOR=10181046   # 0x9B59B6 (Purple)
              PRERELEASE_LABEL="Pre-release"
              ;;
            beta)
              TITLE_PREFIX="🧪 Beta"
              COLOR=3447003    # 0x3498DB (Blue)
              PRERELEASE_LABEL="Pre-release"
              ;;
            release)
              TITLE_PREFIX="🎉 Release"
              COLOR=3066993    # 0x2ECC71 (Green)
              PRERELEASE_LABEL="Stable"
              ;;
            *)
              TITLE_PREFIX="📦 Build"
              COLOR=15158332   # 0xE74C3C (Red) fallback
              PRERELEASE_LABEL="Build"
              ;;
          esac

          # ---- CHANGELOG 抜粋（長すぎるとエラーになるので先頭60行を簡易抜粋）----
          CHANGELOG_SNIP="Released for Minecraft **${MC_VERSION}**."
          # JSON 文字列用に最低限のエスケープ
          CHANGELOG_SNIP="${CHANGELOG_SNIP//\\/\\\\}"
          CHANGELOG_SNIP="${CHANGELOG_SNIP//\"/\\\"}"

          # ---- Embed 本文（リンクボタン付き）----
          read -r -d '' JSON <<EOF || true
          {
            "username": "StreamTweaks Release Bot",
            "embeds": [
              {
                "title": "${TITLE_PREFIX}: ${VERSION_TAG}",
                "url": "${MODRINTH_VER_URL}",
                "description": "${CHANGELOG_SNIP}",
                "color": ${COLOR},
                "fields": [
                  { "name": "Channel",   "value": "${CHANNEL}",       "inline": true },
                  { "name": "Stability", "value": "${PRERELEASE_LABEL}", "inline": true },
                  { "name": "Minecraft", "value": "${MC_VERSION}",    "inline": true },
                  { "name": "Modrinth",  "value": "${MODRINTH_VER_URL}" }
                ],
                "timestamp": "${NOW_UTC}"
              }
            ],
            "components": [
              {
                "type": 1,
                "components": [
                  { "type": 2, "style": 5, "label": "View on Modrinth", "url": "${MODRINTH_VER_URL}" }
                ]
              }
            ]
          }
          EOF

          curl -sS -X POST -H "Content-Type: application/json" \
            -d "${JSON}" "$WEBHOOK_URL"


      - name: Delete trigger tag (alpha/beta/release)
        if: always()
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git push origin :refs/tags/${{ steps.ch.outputs.channel }}
